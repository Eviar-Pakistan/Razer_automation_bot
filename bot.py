from playwright.sync_api import sync_playwright
import tkinter as tk
import pyotp
import threading
import time
import sys

otp_code = None
log_text_widget = None
input_frame = None

EMAIL = "liammelendez7395@gmail.com"
PASSWORD = "4EhURtksus0"
MFA_FILE = "mfa_secrets.txt"


def log_to_textbox(text):
    if log_text_widget:
        log_text_widget.configure(state='normal')
        log_text_widget.insert(tk.END, text + '\n')
        log_text_widget.see(tk.END)
        log_text_widget.configure(state='disabled')


class TextRedirector:
    def write(self, s): log_to_textbox(s.strip())
    def flush(self): pass


def save_secret_key(email, secret_key):
    with open(MFA_FILE, "a") as f:
        f.write(f"{email}: {secret_key}\n")
    print(f"Secret key saved to {MFA_FILE}")


def get_last_secret_key():
    try:
        with open(MFA_FILE, "r") as f:
            lines = f.readlines()
            if not lines:
                raise ValueError("File is empty.")
            last_line = lines[-1].strip()
            if ':' not in last_line:
                raise ValueError("Invalid format in MFA file.")
            _, key = last_line.split(":", 1)
            return key.strip()
    except Exception as e:
        print(f"Error reading MFA file: {e}")
        return None


def start_live_mfa_display(secret_key):
    totp = pyotp.TOTP(secret_key)

    def update_code():
        current_code = totp.now()
        seconds_remaining = totp.interval - (int(time.time()) % totp.interval)
        code_label.config(text=f"Code: {current_code} | Expires in: {seconds_remaining}s")
        code_label.after(1000, update_code)

    code_label = tk.Label(log_text_widget.master, text="", font=("Courier", 14), fg="#ff0000")
    code_label.pack(pady=10)
    update_code()


def ask_for_otp_ui():
    global otp_code, log_text_widget, input_frame

    def on_submit(): nonlocal entry; globals()['otp_code'] = entry.get()

    root = tk.Tk()
    root.title("Razer Automation")
    root.geometry("600x600")
    root.resizable(False, False)

    log_text_widget = tk.Text(root, height=25, state='disabled', bg="#1e1e1e", fg="#3cff00")
    log_text_widget.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

    input_frame = tk.Frame(root)
    tk.Label(input_frame, text="Enter 6-digit OTP:").pack(pady=5)
    entry = tk.Entry(input_frame, justify='center', font=("Helvetica", 14))
    entry.pack()
    tk.Button(input_frame, text="Continue", command=on_submit).pack(pady=5)

    sys.stdout = TextRedirector()
    threading.Thread(target=automate_mfa_setup, daemon=True).start()
    root.mainloop()


# === MAIN AUTOMATION ===
def automate_mfa_setup():
    print("Starting Razer automation...")

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=True)
        page = browser.new_page()

        # Login
        page.goto("https://razerid.razer.com/")
        page.fill("#input-login-email", EMAIL)
        page.fill("#input-login-password", PASSWORD)
        page.click("#btn-log-in")
        print("Submitted login form.")

        page.wait_for_url("**/dashboard", timeout=20000)
        print("Logged in. Navigating to security setup...")

        try: page.click(".cky-btn.cky-btn-accept", timeout=3000)
        except: pass

        page.goto("https://razerid.razer.com/account/security/setup")

        # Check if MFA already set up
        try:
            description = page.text_content(".modal-description.mb-15.text-gray").strip().lower()
            if "enter the code generated by your authenticator" in description:
                print("MFA is already set up.")
                key = get_last_secret_key()
                # if key:
                    # start_live_mfa_display(key)
                
        except Exception as e:
            print(f"Failed to check existing MFA setup: {e}")

        # Wait for OTP modal
        print("Waiting for OTP modal...")
        page.wait_for_selector(".input-group-otp input", timeout=30000)
        print("OTP modal detected!")

        input_frame.pack(pady=10)

        while not otp_code or len(otp_code) != 6 or not otp_code.isdigit():
            time.sleep(1)

        # Fill OTP
        otp_inputs = page.query_selector_all(".input-group-otp input")
        if len(otp_inputs) != 6:
            print("OTP input fields not found.")
            return
        for i, digit in enumerate(otp_code): otp_inputs[i].fill(digit)
        print("OTP entered.")

        # Choose Authenticator App
        print("Selecting Authenticator App...")
        page.wait_for_selector(".tfa-item", timeout=10000)
        page.click(".tfa-item")

        # Get Secret Key
        page.wait_for_selector(".secret-key", state="attached", timeout=10000)
        secret_key = page.text_content(".secret-key").strip()
        print(f"Secret Key: {secret_key}")
        save_secret_key(EMAIL, secret_key)

        page.click("#btn-next")
        print("Clicked 'Next'")

        # Final TOTP Input
        page.wait_for_selector(".input-group-otp input", timeout=15000)
        totp = pyotp.TOTP(secret_key)
        final_code = totp.now()
        final_inputs = page.query_selector_all(".input-group-otp input")
        if len(final_inputs) != 6:
            print("Final OTP fields missing.")
            return
        for i, digit in enumerate(final_code): final_inputs[i].fill(digit)
        print("Final OTP entered.")

        time.sleep(2)
        page.click("#btn-next")
        print("Clicked final 'Next'")

        try:
            page.wait_for_selector("#btn-finish", timeout=10000)
            page.click("#btn-finish")
            print("MFA Setup Completed!")
        except:
            print("Finish button not found or already clicked.")

        print("\nLive MFA Codes (refreshing every 30 seconds):")
        # start_live_mfa_display(secret_key)


ask_for_otp_ui()
